##
# Functions and aliases for use with stanford nlp cluster (whether on cluster or on mac)
##


# This script will
# - set up sshfs
# - set up appropriate port forwarding for jupyter notebooks and tensorboard
# - check if kinit token exists and prompt for sign in if not
#
# Additional Notes:
# SSHFS should be configured as https://howchoo.com/mac/how-to-install-sshfs
# brew cask install osxfuse, brew instsall sshfs

echo "Sourcing in func_stanf"

# Config (change these)
mount_point="/Users/jsrozner/MOUNT/scdt"    # Your local mnt dir
local_user_name='jsrozner'    # update this to avoid accidentally running from remote
sc_user_name='rozner'

# Ports for tunneling
jupyter_port=8888         # 8888 is a lucky number 
tensorboard_port=8887

# tunnel $3(machine):$2(port) to localhost:$1(port)
# i.e. if you have a process running on $3==machine at $2==machine_port
# that process will become visible on localhost:$1==port
#
# for example, running from sc node
# (from sc) tun 6729 3760 jagupard15 will tunnel jagupard15 3760 to 6729 local (on sc)
# then (from local) tun 3759 6729 sc will tunnel sc 6729 to 3759 local (your
# personal machine)
#function tun {
#  if [ ${#} -ne 3 ]; then
#    echo "Usage: tun <output port> <source port> <origin>"
#    echo got ${@}
#    return
#  fi
#  ssh -N -L $1:localhost:$2 $3 $@
#}
#

# slurm interactive
# si <john|jag> <conda env name>
function si {
  if [ ${#} -ne 2 ]; then
    echo "Usage: <john|jag> <conda env name>"
    return
  fi

  nlprun -q $1 -a $2
}
#alias si_john='si john '
#alias si_jag='nlprun -q jag -p standard -a py36-abisee -g 1'

# Start a jupyter notebook from stanf machine on jupyter_port
alias jp='export XDG_RUNTIME_DIR=""; jupyter notebook --no-browser --port=$jupyter_port'

# run on jagupard or john to setup jupyter and tensorboard
function jagup {
  if [[ `hostname` != john* ]] && [[ `hostname` != jagupard* ]];
  then 
    echo "Run jagup on john or jagupard nodes. You're on `hostname`"
    return
  fi

  # make sure nothing from outside influences us
  # reset OPTIND sinc we define this in a function, rather than as a script
  unset jup_dir tboard_dir
  OPTIND=1
  # set up port forwarding
  # default arguments
  jup_dir=""
  tboard_dir=""
  # colon specifies an optional arg with a value
  while getopts "j:t:" flag; do
    case $flag in
      j) jup_dir=$flag;;
      t) tboard_dir=$flag;;
    esac
  done

  if [ ! -n "$jup_dir" ] && [ ! -n "$tboard_dir" ]; then
    echo "Usage: -j <jup_dir> -t <tboard_log_dir>"
    return
  fi

  if [ -n "$jup_dir" ]; then
    echo "Running jupyter in ${jup_dir}"
    pushd $jup_dir ; jp & popd
  fi
  if [ -n "$tboard_dir" ]; then
    echo "Running tensorboard with savedir {tboard_dir}"
    tensorboard --logdir=${tboard_dir} --port=${tensorboard_port} &
  fi 
}

function sremote {
  # also kinit
  klist -s || -l 72h kinit rozner@CS.STANFORD.EDU

  # ssh onto machine if arg given
  if [ ${#} -eq 0 ]; then
    return
  fi

  ssh $1
}

# Kinit and ssh to any of sc, scdt, jamie
# Args: $1 optional; if give will ssh into this node
function stanf {
  if [ `whoami` != ${local_user_name} ]
  then 
    echo "Run stanf function only on local mac"
    return
  fi

  # also kinit
  sremote

  # Mount for scratch space
  echo "  Mounting remote at ${mount_point}. Use 'um' to unmount"
  sshfs scdt: $mount_point

  # ssh onto machine if arg given
  if [ ${#} -ne 0 ]; then
    sremote $1
  fi

  echo "after setting up a remote job, run tunnels locally"
}
alias um='umount ${mount_point}'

alias sc='sremote sc'
alias scdt='sremote scdt'


function tunnels {
  if [ ${#} -lt 2 ]; then
    echo "Usage: machine (e.g. jagupard10) port1 (optional) port2"
    return
  fi

  host=$1.stanford.edu

  echo "ssh -N -L $2:localhost:$2 $host &"
  ssh -N -L ${2}:localhost:${2} $host &
  echo "linked port $2"

  if [ ${#} -eq 3 ]; then
    echo ssh -N -L $3:localhost:$3 $host &
    ssh -N -L $3:localhost:$3 $host &
    echo "linked port $3"
  fi
}
